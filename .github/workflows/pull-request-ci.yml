name: Java CI on Pull Request

on:
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build, Test, and Generate Coverage Report
        run: mvn -B -DtestFailureIgnore=true clean install

      - name: Upload Coverage Dashboard
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-html-report
          path: target/site/jacoco/

      - name: Check Coverage Gate
        if: always()
        run: |
          # Guard against missing jacoco data
          if [ ! -f target/site/jacoco/jacoco.csv ]; then
            echo "Jacoco CSV not found; skipping coverage gate."
            exit 0
          fi

          # Basic gate logic (adjust as needed)
          COVERAGE_MINIMUM=80
          TOTAL_INSTRUCTIONS=$(awk -F',' 'NR==1{print $4+$5}' target/site/jacoco/jacoco.csv 2>/dev/null || echo 0)
          COVERAGE_PERCENTAGE=0
          if [ "$TOTAL_INSTRUCTIONS" -gt 0 ]; then
            INSTRUCTION_COVERED=$(awk -F',' 'NR==1{print $5}' target/site/jacoco/jacoco.csv 2>/dev/null || echo 0)
            COVERAGE_PERCENTAGE=$(awk "BEGIN {printf \"%.0f\", (100 * ${INSTRUCTION_COVERED})/(${TOTAL_INSTRUCTIONS})}")
          fi
          echo "Total Coverage: ${COVERAGE_PERCENTAGE}%"
          echo "Required Minimum: ${COVERAGE_MINIMUM}%"
          if (( COVERAGE_PERCENTAGE < COVERAGE_MINIMUM )); then
            echo "Warning: Code coverage is below the ${COVERAGE_MINIMUM}% threshold."
            # Do not fail the job; just emit a warning
          fi

      - name: Summarize test results
        if: always()
        shell: bash
        run: |
          # Robust summarize: avoid -u to prevent unbound var errors
          set -e
          REPORT_DIR="target/surefire-reports"

          if compgen -G "$REPORT_DIR/TEST-*.xml" > /dev/null; then
            TOTAL=0
            FAILURES=0
            ERRORS=0
            SKIPPED=0
            FAILED_TESTS=()

            for file in "$REPORT_DIR"/TEST-*.xml; do
              if [ -f "$file" ]; then
                t=$(grep -oE 'tests="[0-9]+"' "$file" | head -n1 | cut -d'="' -f2 | tr -d '"')
                f=$(grep -oE 'failures="[0-9]+"' "$file" | head -n1 | cut -d'="' -f2 | tr -d '"')
                e=$(grep -oE 'errors="[0-9]+"' "$file" | head -n1 | cut -d'="' -f2 | tr -d '"')
                s=$(grep -oE 'skipped="[0-9]+"' "$file" | head -n1 | cut -d'="' -f2 | tr -d '"')

                t=${t:-0}; f=${f:-0}; e=${e:-0}; s=${s:-0}
                TOTAL=$((TOTAL + t))
                FAILURES=$((FAILURES + f))
                ERRORS=$((ERRORS + e))
                SKIPPED=$((SKIPPED + s))

                # Collect failed test names
                while IFS= read -r line; do
                  if echo "$line" | grep -q '<testcase'; then
                    NAME=$(echo "$line" | grep -oE 'name="[^"]+"' | cut -d'"' -f2)
                    # If this testcase has a failure or error, record it
                    if grep -q '<failure>' "$file" || grep -q '<error>' "$file"; then
                      if [ -n "$NAME" ]; then
                        FAILED_TESTS+=("$NAME")
                      fi
                    fi
                  fi
                done < "$file"
              fi
            done

            PASSED=$((TOTAL - FAILURES - ERRORS - SKIPPED))

            echo "[INFO] Tests run: ${TOTAL}, Failures: ${FAILURES}, Errors: ${ERRORS}, Skipped: ${SKIPPED}, Time elapsed: N/A"
            if [ ${#FAILED_TESTS[@]} -gt 0 ]; then
              printf "FAILED TESTS: "
              printf "%s," "${FAILED_TESTS[@]}"
              echo
            fi

            FAILED_LIST=$(printf "%s," "${FAILED_TESTS[@]}")
            FAILED_LIST=${FAILED_LIST%,}
            echo "failed_tests=${FAILED_LIST}" >> "$GITHUB_OUTPUT"
          else
            echo "[INFO] No Surefire reports found. Tests may not have run."
            echo "failed_tests=" >> "$GITHUB_OUTPUT"
          fi