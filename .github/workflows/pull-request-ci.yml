# A descriptive name for your workflow, shown in the GitHub "Actions" tab
name: Java CI on Pull Request

# This section defines the trigger for the workflow.
on:
  # Run this workflow whenever a pull request is opened or updated
  # against the 'main' branch.
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This job is named 'build-and-test'. You can name it anything you like.
  build-and-test:
    # The type of machine to run the job on. We'll use a standard Ubuntu image.
    runs-on: ubuntu-latest

    # A sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Check out the code from the pull request branch.
      # This is a pre-built action provided by GitHub.
      - name: Check out repository code
        uses: actions/checkout@v4

      # Step 2: Set up the Java Development Kit (JDK).
      # This action installs the specified version of Java.
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      # Step 3: Cache Maven packages to speed up future builds.
      # This is an optional but highly recommended optimization.
      # It stores the downloaded dependencies so they don't have to be downloaded every time.
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Run the build and tests using Maven.
      # The '-B' flag runs Maven in batch mode (non-interactive).
      # 'clean install' will compile the code, run the tests, and package the application.
      # If any test fails, this step will fail, and the entire job will fail.
      - name: Run tests with Maven
        run: mvn -B clean install