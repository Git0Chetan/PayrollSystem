name: Java CI on Pull Request

on:
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build, Test, and Generate Coverage Report
        run: mvn -B -DtestFailureIgnore=true clean install

      - name: Upload Coverage Dashboard
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-html-report
          path: target/site/jacoco/

      - name: Check Coverage Gate
        if: always()
        run: |
          # Guard against missing jacoco data
          XML_REPORT="target/site/jacoco/jacoco.xml"
          if [ ! -f "$XML_REPORT" ]; then
            echo "Jacoco XML report not found; skipping coverage gate."
            exit 0
          fi

          # Parse Jacoco XML for INSTRUCTION counter
          COVERED=$(grep -Eo 'counter type="INSTRUCTION"[^>]*covered="[^"]+"' "$XML_REPORT" | head -n1 | sed 's/.*covered="\([^"]*\)".*/\1/')
          MISSED=$(grep -Eo 'counter type="INSTRUCTION"[^>]*missed="[^"]+"' "$XML_REPORT" | head -n1 | sed 's/.*missed="\([^"]*\)".*/\1/')
          COVERED=${COVERED:-0}
          MISSED=${MISSED:-0}
          TOTAL=$((COVERED + MISSED))
          if [ "$TOTAL" -eq 0 ]; then
            echo "No coverage data found in Jacoco report; skipping gate."
            exit 0
          fi
          COVERAGE_PERCENT=$((100 * COVERED / TOTAL))

          COVERAGE_MINIMUM=80
          echo "Total Coverage: ${COVERAGE_PERCENT}%"
          echo "Required Minimum: ${COVERAGE_MINIMUM}%"

          if (( COVERAGE_PERCENT < COVERAGE_MINIMUM )); then
            echo "Warning: Code coverage is below the ${COVERAGE_MINIMUM}% threshold."
            # Do not fail the job; just a warning
          fi

      - name: Summarize test results
        if: always()
        shell: bash
        run: |
          # Robust summarize: avoid strict -u to prevent unbound var errors
          set -e
          REPORT_DIR="target/surefire-reports"

          TOTAL=0
          FAILURES=0
          ERRORS=0
          SKIPPED=0
          FAILED_TESTS=()

          if [ -d "$REPORT_DIR" ]; then
            for file in "$REPORT_DIR"/TEST-*.xml; do
              if [ -f "$file" ]; then
                t=$(grep -o 'tests="[^"]*"' "$file" | cut -d'"' -f2)
                f=$(grep -o 'failures="[^"]*"' "$file" | cut -d'"' -f2)
                e=$(grep -o 'errors="[^"]*"' "$file" | cut -d'"' -f2)
                s=$(grep -o 'skipped="[^"]*"' "$file" | cut -d'"' -f2)

                t=${t:-0}; f=${f:-0}; e=${e:-0}; s=${s:-0}
                TOTAL=$((TOTAL + t))
                FAILURES=$((FAILURES + f))
                ERRORS=$((ERRORS + e))
                SKIPPED=$((SKIPPED + s))

                # If there are failures in this XML, collect test names
                if grep -q '<failure>' "$file" || grep -q '<error>' "$file"; then
                  test_names=$(grep -o 'name="[^"]*"' "$file" | cut -d'"' -f2)
                  for nm in $test_names; do
                    if [ -n "$nm" ]; then
                      FAILED_TESTS+=("$nm")
                    fi
                  done
                fi
              fi
            done
          else
            echo "No Surefire reports found (directory missing)."
          fi

          PASSED=$((TOTAL - FAILURES - ERRORS - SKIPPED))

          echo "[INFO] Tests run: ${TOTAL}, Failures: ${FAILURES}, Errors: ${ERRORS}, Skipped: ${SKIPPED}, Time elapsed: N/A"
          if [ ${#FAILED_TESTS[@]} -gt 0 ]; then
            printf "FAILED TESTS: "
            printf "%s," "${FAILED_TESTS[@]}"
            echo
          fi

          FAILED_LIST=$(printf "%s," "${FAILED_TESTS[@]}")
          FAILED_LIST=${FAILED_LIST%,}
          echo "failed_tests=${FAILED_LIST}" >> "$GITHUB_OUTPUT"